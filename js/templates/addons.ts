import { DateTime } from 'luxon';
import { Dat, Obj } from 'simutrans-dat-parser';
import { definitionWithDat } from "../interface";
import { TRANSLATE_KEY } from '../util';

export default (data: definitionWithDat[], icons: { file: string, size: number }[]) =>
  `This file was generated by \`npm run listing\` command at ${DateTime.now().toLocaleString(DateTime.DATETIME_FULL)}.

# アドオン一覧

${data.map(d => renderDef(d, icons)).join('\n')}
`;

const renderDef = (def: definitionWithDat, icons: { file: string, size: number }[]): string =>
  `## \`${def.pakFile}\`

${def.datFiles.map(d => renderDat(d, icons)).join('\n')}
`;

const renderDat = ({ datFile, dat }: { datFile: string, dat: Dat }, icons: { file: string, size: number }[]): string =>
  `### \`${datFile}\`

<table>
  <thead>
    <th>アイコン</th>
    <th>名前</th>
    <th>翻訳</th>
    <th>obj</th>
    <th>waytype</th>
    <th>system_type</th>
    <th>購入費</th>
    <th>維持費</th>
    <th>登場年月</th>
    <th>引退年月</th>
  </thead>
  <tbody>
  ${dat.objs.map(d => renderObj(d, icons)).join('\n')}
  </tbody>
</table>`;

const renderObj = (obj: Obj, icons: { file: string, size: number }[]): string =>
  `<tr>
  <td>${renderIcon(obj, icons)}</td>
  <td>${obj.name}</td>
  <td>${renderTranslate(obj)}</td>
  <td>${obj.obj}</td>
  <td>${obj.findParam('waytype')?.value || 'N/A'}</td>
  <td>${obj.findParam('system_type')?.value || 'N/A'}</td>
  <td>${obj.findParam('cost')?.value || 'N/A'}</td>
  <td>${obj.findParam('maintenance')?.value || 'N/A'}</td>
  <td>${obj.findParam('intro_year')?.value || '?'}/${obj.findParam('intro_month')?.value || '?'}</td>
  <td>${obj.findParam('retire_year')?.value || '?'}/${obj.findParam('retire_month')?.value || '?'}</td>
  </tr>`;

const renderIcon = (obj: Obj, icons: { file: string, size: number }[]): string => {
  const iconParam = obj.findParam('icon');
  if (!iconParam) {
    return 'N/A';
  }
  const file = `${iconParam.valueVal.split('/').pop()}.png`;
  const icon = icons.find(i => i.file === file);
  const size = icon?.size || 256;
  const baseStyle = `width:32px;height:32px;background-image:url(./${file});`;
  const position = `background-position:left ${-iconParam.valueParams[1] * size}px top ${-iconParam.valueParams[0] * size}px`;
  return `<div style="${baseStyle}${position}"></div>`;
};

const renderTranslate = (obj: Obj): string => obj.comments
  .filter(c => c.value.startsWith(TRANSLATE_KEY))
  .map(c => c.value.replace(TRANSLATE_KEY, '').trim() || '')
  .join('<br>');

